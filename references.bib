@misc{abi,
  title = {Application Binary Interface --- {{Wikipedia}}, the Free Encyclopedia},
  author = {{Wikipedia contributors}},
  year = {2025},
  month = jul,
  urldate = {2025-08-22}
}

@misc{assemblyscript_git,
  title = {{{AssemblyScript}}/Assemblyscript},
  year = {2025},
  month = aug,
  urldate = {2025-08-19},
  abstract = {A TypeScript-like language for WebAssembly.},
  copyright = {Apache-2.0},
  howpublished = {The AssemblyScript Project},
  keywords = {assemblyscript,compiler,typescript,wasm,webassembly}
}

@misc{automotive_ota,
  title = {What Is {{OTA}} in Automotive? {{Over}} the Air Updates Explained.},
  shorttitle = {What Is {{OTA}} in Automotive?},
  author = {Press, Rambus},
  journal = {Rambus},
  urldate = {2025-08-17},
  abstract = {Over-the-air (OTA) programming refers to the ability to download applications, services, and configurations over a mobile or cellular network.},
  langid = {american}
}

@misc{cabi,
  title = {Component-Model/Design/Mvp/{{CanonicalABI}}.Md at Main {$\cdot$} {{WebAssembly}}/Component-Model},
  urldate = {2025-08-19},
  howpublished = {https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md}
}

@misc{cargo_component_git,
  title = {Bytecodealliance/Cargo-Component},
  year = {2025},
  month = aug,
  urldate = {2025-08-21},
  abstract = {A Cargo subcommand for creating WebAssembly components based on the component model proposal.},
  copyright = {Apache-2.0},
  howpublished = {Bytecode Alliance}
}

@misc{cargo_criterion_docs,
  title = {Cargo-Criterion - {{Criterion}}.Rs {{Documentation}}},
  urldate = {2025-08-19},
  howpublished = {https://bheisler.github.io/criterion.rs/book/cargo\_criterion/cargo\_criterion.html}
}

@misc{cranelift,
  title = {Cranelift},
  urldate = {2025-08-19},
  howpublished = {https://cranelift.dev/}
}

@misc{criterion_docs,
  title = {Criterion.Rs - {{Criterion}}.Rs {{Documentation}}},
  author = {{bheisler}},
  urldate = {2025-08-17},
  howpublished = {https://bheisler.github.io/criterion.rs/book/criterion\_rs.html}
}

@misc{dhat_crate,
  title = {Dhat - Crates.Io: {{Rust Package Registry}}},
  shorttitle = {Dhat - Crates.Io},
  year = {2024},
  month = feb,
  urldate = {2025-08-19},
  abstract = {A library for heap profiling and ad hoc profiling with DHAT.},
  howpublished = {https://crates.io/crates/dhat},
  langid = {english}
}

@misc{emscripten_git,
  title = {Emscripten-Core/Emscripten},
  year = {2025},
  month = aug,
  urldate = {2025-08-19},
  abstract = {Emscripten: An LLVM-to-WebAssembly Compiler},
  howpublished = {emscripten-core},
  keywords = {emscripten,hacktoberfest,wasm,webassembly}
}

@misc{eu_cyber_res_act,
  title = {Cyber {{Resilience Act}} {\textbar} {{Shaping Europe}}'s Digital Future},
  urldate = {2025-08-17},
  abstract = {The Cyber Resilience Act enhances cybersecurity standards of products that contain a digital component, requiring manufacturers and retailers to ensure cybersecurity throughout the lifecycle of their products.},
  howpublished = {https://digital-strategy.ec.europa.eu/en/policies/cyber-resilience-act},
  langid = {english}
}

@misc{friedrich_impl,
  title = {Idlab-Discover/I2c-Wasm-Components},
  year = {2025},
  month = feb,
  urldate = {2025-08-19},
  abstract = {A proof of concept for using WebAssembly together with I2C},
  copyright = {Apache-2.0},
  howpublished = {IDLab DISCOVER},
  keywords = {embedded,i2c,wasi,wasmtime,wit}
}

@article{friedrich_paper,
  title = {Advancing the {{I2C}} Proposal for {{WebAssembly System Interface}} /},
  author = {Vandenberghe, Friedrich},
  year = {2024}
}

@misc{hal,
  title = {Rust-Embedded/Embedded-Hal: {{A Hardware Abstraction Layer}} ({{HAL}}) for Embedded Systems},
  urldate = {2025-08-22},
  howpublished = {https://github.com/rust-embedded/embedded-hal?tab=readme-ov-file}
}

@manual{i2c_specification,
  type = {User Manual},
  title = {{{I2C-bus}} Specification and User Manual},
  author = {{NXP Semiconductors}},
  year = {2021},
  month = oct,
  number = {UM10204},
  institution = {NXP Semiconductors},
  annotation = {Rev. 7.1},
  note = {Rev. 7.0}
}

@misc{img_arduino_icon,
  title = {English:  {{Arduino Uno Microcontroller Board}}},
  shorttitle = {English},
  author = {{PhilippHenkel}},
  year = {2018},
  month = nov,
  urldate = {2025-08-09}
}

@misc{img_rpi_icon,
  title = {Raspberry {{Pi Icon}} \#35510 - {{Free Icons Library}}},
  urldate = {2025-08-09},
  howpublished = {https://icon-library.com/icon/raspberry-pi-icon-20.html}
}

@misc{jco_docs,
  title = {Introduction - Jco},
  urldate = {2025-08-19},
  howpublished = {https://bytecodealliance.github.io/jco/}
}

@misc{musl,
  title = {Musl Libc},
  urldate = {2025-08-22},
  howpublished = {https://musl.libc.org/}
}

@misc{pi_os,
  title = {Raspberry {{Pi OS}} Downloads},
  author = {Ltd, Raspberry Pi},
  journal = {Raspberry Pi},
  urldate = {2025-08-19},
  abstract = {Raspberry Pi OS (previously called Raspbian) is our official, supported operating system.},
  howpublished = {https://www.raspberrypi.com/software/operating-systems/},
  langid = {british}
}

@inproceedings{rossberg2018webassembly,
  title = {Bringing the Web up to Speed with {{WebAssembly}}},
  author = {Haas, Andreas and Rossberg, Andreas and Schuff, Derek and Titzer, Ben and Holman, Michael and Gohman, Dan and Wagner, Luke and Zakai, Alon and Bastien, Jf},
  year = {2017},
  month = jun,
  pages = {185--200},
  doi = {10.1145/3062341.3062363}
}

@misc{rpi5_specs,
  title = {Buy a {{Raspberry Pi}} 5},
  author = {Ltd, Raspberry Pi},
  journal = {Raspberry Pi},
  urldate = {2025-08-22},
  abstract = {The everything computer. Optimised.},
  howpublished = {https://www.raspberrypi.com/products/raspberry-pi-5/},
  langid = {british}
}

@misc{rust_wasm_target,
  title = {Platform {{Support}} - {{The}} Rustc Book},
  urldate = {2025-08-19},
  howpublished = {https://doc.rust-lang.org/rustc/platform-support.html\#tier-2-with-host-tools}
}

@misc{uno_specs,
  title = {{{UNO R3}} {\textbar} {{Arduino Documentation}}},
  urldate = {2025-08-22},
  howpublished = {https://docs.arduino.cc/hardware/uno-rev3/}
}

@misc{wabt_git,
  title = {{{WebAssembly}}/Wabt: {{The WebAssembly Binary Toolkit}}},
  urldate = {2025-08-19},
  howpublished = {https://github.com/WebAssembly/wabt/tree/main}
}

@misc{wamr_heaps,
  title = {Understand the {{WAMR}} Heaps},
  author = {Wang, Xin and Huang},
  year = {2023},
  month = mar,
  journal = {WAMR},
  urldate = {2025-08-22},
  abstract = {Linear memory \# The linear memory is a contiguous, mutable array of raw bytes. For most compilers, e.g. wasi-sdk, emsdk, rustc or asc, normally it includes three parts, data area, auxiliary stack area and heap area. The initial and maximum sizes of linear memory can be configured through the compilation parameters: For wasi-sdk, the initial/max size can be specified with -Wl,--initial-memory=n1,--max-memory=n2 For emsdk, the initial/max size can be specified with -s INITIAL\_MEMORY=n1 -s MAXIMUM\_MEMORY=n2 -s ALLOW\_MEMORY\_GROWTH=1 or -s TOTAL\_MEMORY=n For asc, they can be specified with --initialMemory and --maximumMemory flags},
  howpublished = {https://bytecodealliance.github.io/wamr.dev/blog/understand-the-wamr-heaps/},
  langid = {american}
}

@misc{wamr_project,
  title = {{{WebAssembly Micro Runtime}}},
  journal = {WAMR},
  urldate = {2025-08-19},
  abstract = {WebAssembly Micro Runtime (WAMR) is a lightweight standalone WebAssembly (WASM) runtime with small footprint, high performance and highly configurable features for applications cross from embedded, IoT, edge to Trusted Execution Environment (TEE), smart contract, cloud native and so on.},
  howpublished = {https://bytecodealliance.github.io/wamr.dev/},
  langid = {american}
}

@misc{wamr_project2,
  title = {Bytecodealliance/Wasm-Micro-Runtime},
  year = {2025},
  month = aug,
  urldate = {2025-08-19},
  abstract = {WebAssembly Micro Runtime (WAMR)},
  copyright = {Apache-2.0},
  howpublished = {Bytecode Alliance},
  keywords = {aot,assembly-script,embedded,interpreter,iot,jit,pthread,runtime,sgx,wasi-nn,wasi-threads,wasm,wasm-socket,webassembly}
}

@misc{wamr_running_modes,
  title = {Introduction to {{WAMR}} Running Modes},
  author = {Liang, Tianlong},
  year = {2023},
  month = jan,
  journal = {WAMR},
  urldate = {2025-08-22},
  abstract = {The options of running a Wasm module \# Usually, a WebAssembly module can be executed in either interpreter, Just-In-Time (JIT), or Ahead-Of-Time (AOT) compilation mode, and the choice can be based on the preference for execute performance, resource, etc. WAMR supports all three modes and even more: AOT: WAMR AOT helps to achieve nearly native speed, very small footprint, and quick startup. Use the wamrc compiler to compile wasm file to the AOT file, and then run it on iwasm vmcore.},
  howpublished = {https://bytecodealliance.github.io/wamr.dev/blog/introduction-to-wamr-running-modes/},
  langid = {american}
}

@misc{wamr_stacks,
  title = {Understand the {{WAMR}} Stacks},
  year = {2023},
  month = mar,
  journal = {WAMR},
  urldate = {2025-08-22},
  abstract = {The status of stacks \# During the WAMR executes a Wasm function, there will be a Wasm stack created and used. For interpreter mode, as the Wasm functions intercall, the Wasm stack frames will grow, while the native stack keeps unchanged. When the Wasm calls into a imported native function and the native function then call into some Wasm function, the native stack will add a frame, and an empty frame will be inserted into wasm stack to indicate the function is imported from native.},
  howpublished = {https://bytecodealliance.github.io/wamr.dev/blog/understand-the-wamr-stacks/},
  langid = {american}
}

@misc{wasi_component_model,
  title = {Introduction - {{The WebAssembly Component Model}}},
  urldate = {2025-08-18},
  howpublished = {https://component-model.bytecodealliance.org/}
}

@misc{wasi_i2c_proposal,
  title = {{{WebAssembly}}/Wasi-I2c},
  year = {2025},
  month = may,
  urldate = {2025-08-19},
  abstract = {I2C API for WASI},
  howpublished = {WebAssembly},
  keywords = {proposal,wasi}
}

@misc{wasi_mozilla_blog,
  title = {Standardizing {{WASI}}: {{A}} System Interface to Run {{WebAssembly}} Outside the Web -- {{Mozilla Hacks}} - the {{Web}} Developer Blog},
  shorttitle = {Standardizing {{WASI}}},
  author = {Clark, Lin},
  year = {2019},
  month = mar,
  journal = {Mozilla Hacks -- the Web developer blog},
  urldate = {2025-08-22},
  abstract = {WebAssembly is an assembly language for a conceptual machine, not a physical one. This is why it can be run across a variety of different machine architectures. WebAssembly needs a ...},
  langid = {american}
}

@misc{wasi_p2,
  title = {{{WASI}} 0.2 {{Launched}}},
  author = {Gohman, Dan},
  year = {2024},
  month = jan,
  journal = {Bytecode Alliance},
  urldate = {2025-08-17},
  abstract = {The WASI Subgroup voted on January 25, 2024 to launch WASI 0.2, also knownas WASI Preview 2, or WASIp2!  This blog post is a brief look at the present,past, and future of WASI, and a repost of an original article sharedhere.},
  howpublished = {https://bytecodealliance.org/articles/WASI-0.2},
  langid = {english}
}

@misc{wasisdk,
  title = {{{WebAssembly}}/Wasi-Sdk},
  year = {2025},
  month = aug,
  urldate = {2025-08-18},
  abstract = {WASI-enabled WebAssembly C/C++ toolchain},
  copyright = {Apache-2.0},
  howpublished = {WebAssembly},
  keywords = {llvm,sysroot,wasi-libc,wasi-sdk}
}

@misc{wasm_spec,
  title = {Feature {{Status}} - {{WebAssembly}}},
  urldate = {2025-08-17},
  abstract = {WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.},
  howpublished = {https://webassembly.org/features/},
  langid = {english}
}

@misc{wasm_tools_git,
  title = {Bytecodealliance/Wasm-Tools: {{CLI}} and {{Rust}} Libraries for Low-Level Manipulation of {{WebAssembly}} Modules},
  urldate = {2025-08-19},
  howpublished = {https://github.com/bytecodealliance/wasm-tools/tree/main}
}

@misc{wasmtime_and_cranelift_2023,
  title = {Wasmtime and {{Cranelift}} in 2023},
  author = {Hickey, Pat and Fallin, Chris and Fitzgerald, Nick},
  year = {2023},
  month = nov,
  journal = {Bytecode Alliance},
  urldate = {2025-08-22},
  abstract = {It's that time of year: time to start winding down for the winter holidayseason, time to reflect on the past year, and time to think about what we canaccomplish together in 2024. The Wasmtime and Cranelift projects are noexception. This ...},
  howpublished = {https://bytecodealliance.org/articles/wasmtime-and-cranelift-in-2023},
  langid = {english}
}

@misc{wasmtime_bindgen_docs,
  title = {Bindgen in Wasmtime::Component - {{Rust}}},
  urldate = {2025-08-19},
  howpublished = {https://docs.wasmtime.dev/api/wasmtime/component/macro.bindgen.html}
}

@misc{wasmtime_p1_crate_docs,
  title = {Wasmtime\_wasi::Preview1 - {{Rust}}},
  urldate = {2025-08-22},
  howpublished = {https://docs.rs/wasmtime-wasi/latest/wasmtime\_wasi/preview1/index.html}
}

@misc{wasmtime_p2_crate_docs,
  title = {Wasmtime\_wasi::P2 - {{Rust}}},
  urldate = {2025-08-22},
  howpublished = {https://docs.wasmtime.dev/api/wasmtime\_wasi/p2/index.html}
}

@misc{wasmtime_project,
  title = {Introduction - {{Wasmtime}}},
  urldate = {2025-08-19},
  howpublished = {https://docs.wasmtime.dev/}
}

@misc{wit_bindgen_git,
  title = {Bytecodealliance/Wit-Bindgen},
  year = {2025},
  month = aug,
  urldate = {2025-08-19},
  abstract = {A language binding generator for WebAssembly interface types},
  copyright = {Apache-2.0},
  howpublished = {Bytecode Alliance},
  keywords = {interface-types,module-linking,rust,wasi,wasmtime,webassembly}
}

@misc{wit_specification,
  title = {{{WIT Reference}} - {{The WebAssembly Component Model}}},
  urldate = {2025-08-19},
  howpublished = {https://component-model.bytecodealliance.org/design/wit.html}
}

@misc{witx_docs,
  title = {{{WASI}}/Legacy/Tools/Witx-Docs.Md at Main {$\cdot$} {{WebAssembly}}/{{WASI}}},
  journal = {GitHub},
  urldate = {2025-08-19},
  abstract = {WebAssembly System Interface. Contribute to WebAssembly/WASI development by creating an account on GitHub.},
  howpublished = {https://github.com/WebAssembly/WASI/blob/main/legacy/tools/witx-docs.md},
  langid = {english}
}