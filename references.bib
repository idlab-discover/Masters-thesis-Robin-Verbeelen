@misc{abi,
  title = {Application Binary Interface — {{Wikipedia}}, the Free Encyclopedia},
  author = {{Wikipedia contributors}},
  date = {2025-07-13},
  url = {https://en.wikipedia.org/w/index.php?title=Application_binary_interface&oldid=1300347152},
  urldate = {2025-08-22}
}

@software{assemblyscript_git,
  title = {{{AssemblyScript}}/Assemblyscript},
  date = {2025-08-19T11:16:22Z},
  origdate = {2017-09-28T11:06:50Z},
  url = {https://github.com/AssemblyScript/assemblyscript},
  urldate = {2025-08-19},
  abstract = {A TypeScript-like language for WebAssembly.},
  organization = {The AssemblyScript Project},
  keywords = {assemblyscript,compiler,typescript,wasm,webassembly}
}

@online{automotive_ota,
  title = {What Is {{OTA}} in Automotive? {{Over}} the Air Updates Explained.},
  shorttitle = {What Is {{OTA}} in Automotive?},
  author = {Press, Rambus},
  url = {https://www.rambus.com/blogs/ota-updates-explained/},
  urldate = {2025-08-17},
  abstract = {Over-the-air (OTA) programming refers to the ability to download applications, services, and configurations over a mobile or cellular network.},
  langid = {american},
  organization = {Rambus}
}

@online{c_union,
  title = {C {{Unions}}},
  year = {08:14:12+00:00},
  url = {https://www.geeksforgeeks.org/c/c-unions/},
  urldate = {2025-08-25},
  abstract = {Your All-in-One Learning Portal: GeeksforGeeks is a comprehensive educational platform that empowers learners across domains-spanning computer science and programming, school education, upskilling, commerce, software tools, competitive exams, and more.},
  langid = {american},
  organization = {GeeksforGeeks}
}

@online{cabi,
  title = {Component-Model/Design/Mvp/{{CanonicalABI}}.Md at Main · {{WebAssembly}}/Component-Model},
  url = {https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md},
  urldate = {2025-08-19}
}

@software{cargo_component_git,
  title = {Bytecodealliance/Cargo-Component},
  date = {2025-08-17T04:21:06Z},
  origdate = {2022-04-12T02:57:41Z},
  url = {https://github.com/bytecodealliance/cargo-component},
  urldate = {2025-08-21},
  abstract = {A Cargo subcommand for creating WebAssembly components based on the component model proposal.},
  organization = {Bytecode Alliance}
}

@online{cargo_criterion_docs,
  title = {Cargo-Criterion - {{Criterion}}.Rs {{Documentation}}},
  url = {https://bheisler.github.io/criterion.rs/book/cargo_criterion/cargo_criterion.html},
  urldate = {2025-08-19}
}

@online{cranelift,
  title = {Cranelift},
  url = {https://cranelift.dev/},
  urldate = {2025-08-19}
}

@online{criterion_docs,
  title = {Criterion.Rs - {{Criterion}}.Rs {{Documentation}}},
  author = {{bheisler}},
  url = {https://bheisler.github.io/criterion.rs/book/criterion_rs.html},
  urldate = {2025-08-17}
}

@online{dhat_crate,
  title = {Dhat - Crates.Io: {{Rust Package Registry}}},
  shorttitle = {Dhat - Crates.Io},
  date = {2024-02-04},
  url = {https://crates.io/crates/dhat},
  urldate = {2025-08-19},
  abstract = {A library for heap profiling and ad hoc profiling with DHAT.},
  langid = {english}
}

@online{embedded_hal_crate,
  title = {Embedded-Hal - Crates.Io: {{Rust Package Registry}}},
  shorttitle = {Embedded-Hal - Crates.Io},
  date = {2024-01-09},
  url = {https://crates.io/crates/embedded-hal},
  urldate = {2025-08-24},
  abstract = {A Hardware Abstraction Layer (HAL) for embedded systems},
  langid = {english}
}

@software{emscripten_git,
  title = {Emscripten-Core/Emscripten},
  date = {2025-08-19T16:31:41Z},
  origdate = {2011-02-12T05:23:30Z},
  url = {https://github.com/emscripten-core/emscripten},
  urldate = {2025-08-19},
  abstract = {Emscripten: An LLVM-to-WebAssembly Compiler},
  organization = {emscripten-core},
  keywords = {emscripten,hacktoberfest,wasm,webassembly}
}

@online{eu_cyber_res_act,
  title = {Cyber {{Resilience Act}} | {{Shaping Europe}}’s Digital Future},
  url = {https://digital-strategy.ec.europa.eu/en/policies/cyber-resilience-act},
  urldate = {2025-08-17},
  abstract = {The Cyber Resilience Act enhances cybersecurity standards of products that contain a digital component, requiring manufacturers and retailers to ensure cybersecurity throughout the lifecycle of their products.},
  langid = {english}
}

@inreference{ffi_wiki,
  title = {Foreign Function Interface},
  booktitle = {Wikipedia},
  date = {2025-08-16T20:06:09Z},
  url = {https://en.wikipedia.org/w/index.php?title=Foreign_function_interface&oldid=1306257199},
  urldate = {2025-08-25},
  abstract = {A foreign function interface (FFI) is a mechanism by which a program written in one programming language can call routines or make use of services written or compiled in another one. An FFI is often used in contexts where calls are made into a binary dynamic-link library.},
  langid = {english},
  annotation = {Page Version ID: 1306257199}
}

@software{friedrich_impl,
  title = {Idlab-Discover/I2c-Wasm-Components},
  date = {2025-02-24T22:04:31Z},
  origdate = {2023-12-19T08:25:38Z},
  url = {https://github.com/idlab-discover/i2c-wasm-components},
  urldate = {2025-08-19},
  abstract = {A proof of concept for using WebAssembly together with I2C},
  organization = {IDLab DISCOVER},
  keywords = {embedded,i2c,wasi,wasmtime,wit}
}

@article{friedrich_paper,
  title = {Advancing the {{I2C}} Proposal for {{WebAssembly System Interface}} /},
  author = {Vandenberghe, Friedrich},
  date = {2024},
  url = {https://lib.ugent.be/catalog/rug01:003214608}
}

@online{hal,
  title = {Rust-Embedded/Embedded-Hal: {{A Hardware Abstraction Layer}} ({{HAL}}) for Embedded Systems},
  url = {https://github.com/rust-embedded/embedded-hal?tab=readme-ov-file},
  urldate = {2025-08-22}
}

@manual{i2c_specification,
  type = {User manual},
  title = {{{I2C-bus}} Specification and User Manual},
  author = {{NXP Semiconductors}},
  date = {2021-10-01},
  number = {UM10204},
  publisher = {NXP Semiconductors},
  url = {https://www.nxp.com/docs/en/user-guide/UM10204.pdf},
  annotation = {Rev. 7.1},
  note = {Rev. 7.0}
}

@online{idl,
  title = {Wat is een IDL (Interface Definition Language)?},
  author = {Spasojevic, Anastazija},
  date = {2024-03-27T01:42:00+00:00},
  url = {https://phoenixnap.nl/woordenlijst/idl-betekenis},
  urldate = {2025-08-24},
  abstract = {Lees de IDL-definitie en leer over de rol ervan in de informatietechnologie. Leer vervolgens meer over de basisconcepten van Interface Definition Language.},
  langid = {dutch},
  organization = {phoenixNAP IT Glossary}
}

@artwork{img_arduino_icon,
  title = {English:  {{Arduino Uno Microcontroller Board}}},
  shorttitle = {English},
  author = {{PhilippHenkel}},
  date = {2018-11-09},
  url = {https://commons.wikimedia.org/wiki/File:ArduinoUno.svg},
  urldate = {2025-08-09}
}

@online{img_rpi_icon,
  title = {Raspberry {{Pi Icon}} \#35510 - {{Free Icons Library}}},
  url = {https://icon-library.com/icon/raspberry-pi-icon-20.html},
  urldate = {2025-08-09}
}

@online{iso24089,
  title = {{{ISO}} 24089:2023},
  shorttitle = {{{ISO}} 24089},
  url = {https://www.iso.org/standard/77796.html},
  urldate = {2025-08-24},
  abstract = {Road vehicles — Software update engineering},
  langid = {english},
  organization = {ISO}
}

@online{jco_docs,
  title = {Introduction - Jco},
  url = {https://bytecodealliance.github.io/jco/},
  urldate = {2025-08-19}
}

@online{linux_embedded_hal_crate,
  title = {Linux-Embedded-Hal - Crates.Io: {{Rust Package Registry}}},
  shorttitle = {Linux-Embedded-Hal - Crates.Io},
  date = {2024-01-12},
  url = {https://crates.io/crates/linux-embedded-hal},
  urldate = {2025-08-24},
  abstract = {Implementation of the `embedded-hal` traits for Linux devices},
  langid = {english}
}

@software{lol_alloc_git,
  title = {Craig-{{Macomber}}/Lol\_alloc},
  author = {Craig},
  date = {2025-08-20T20:25:56Z},
  origdate = {2022-08-06T05:13:55Z},
  url = {https://github.com/Craig-Macomber/lol_alloc},
  urldate = {2025-08-25},
  abstract = {Like wee\_alloc, but smaller since I used skinnier letters in the name.}
}

@online{musl,
  title = {Musl Libc},
  url = {https://musl.libc.org/},
  urldate = {2025-08-22}
}

@online{pi_os,
  title = {Raspberry {{Pi OS}} Downloads},
  author = {Ltd, Raspberry Pi},
  url = {https://www.raspberrypi.com/software/operating-systems/},
  urldate = {2025-08-19},
  abstract = {Raspberry Pi OS (previously called Raspbian) is our official, supported operating system.},
  langid = {british},
  organization = {Raspberry Pi}
}

@inproceedings{rossberg2018webassembly,
  title = {Bringing the Web up to Speed with {{WebAssembly}}},
  author = {Haas, Andreas and Rossberg, Andreas and Schuff, Derek and Titzer, Ben and Holman, Michael and Gohman, Dan and Wagner, Luke and Zakai, Alon and Bastien, Jf},
  date = {2017-06},
  pages = {185--200},
  doi = {10.1145/3062341.3062363}
}

@online{rpi5_specs,
  title = {Buy a {{Raspberry Pi}} 5},
  author = {Ltd, Raspberry Pi},
  url = {https://www.raspberrypi.com/products/raspberry-pi-5/},
  urldate = {2025-08-22},
  abstract = {The everything computer. Optimised.},
  langid = {british},
  organization = {Raspberry Pi}
}

@online{rppal_crate,
  title = {Rppal - Crates.Io: {{Rust Package Registry}}},
  shorttitle = {Rppal - Crates.Io},
  date = {2024-12-11},
  url = {https://crates.io/crates/rppal},
  urldate = {2025-08-24},
  abstract = {Interface for the Raspberry Pi's GPIO, I2C, PWM, SPI and UART peripherals.},
  langid = {english}
}

@online{rust_wasm_target,
  title = {Platform {{Support}} - {{The}} Rustc Book},
  url = {https://doc.rust-lang.org/rustc/platform-support.html#tier-2-with-host-tools},
  urldate = {2025-08-19}
}

@online{sexpressions,
  title = {S-Expressions - {{Home}}},
  url = {https://www.s-expressions.org/home},
  urldate = {2025-08-24}
}

@online{stm_hal_crate,
  title = {Stm32h7xx-Hal - Crates.Io: {{Rust Package Registry}}},
  shorttitle = {Stm32h7xx-Hal - Crates.Io},
  date = {2024-03-12},
  url = {https://crates.io/crates/stm32h7xx-hal},
  urldate = {2025-08-24},
  abstract = {Hardware Abstraction Layer implementation for STM32H7 series microcontrollers},
  langid = {english}
}

@online{uno_specs,
  title = {{{UNO R3}} | {{Arduino Documentation}}},
  url = {https://docs.arduino.cc/hardware/uno-rev3/},
  urldate = {2025-08-22}
}

@online{v8_wasm,
  title = {V8 {{JavaScript}} Engine},
  url = {https://v8.dev/},
  urldate = {2025-08-24}
}

@online{w3c2022wasm,
  title = {Wasm 2.0 {{Completed}} - {{WebAssembly}}},
  url = {https://webassembly.org/news/2025-03-20-wasm-2.0/},
  urldate = {2025-08-24},
  abstract = {WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.},
  langid = {english}
}

@online{w3c2022wasm2,
  title = {{{WebAssembly Core Specification}}},
  url = {https://www.w3.org/TR/wasm-core-2/},
  urldate = {2025-08-24}
}

@online{wabt_git,
  title = {{{WebAssembly}}/Wabt: {{The WebAssembly Binary Toolkit}}},
  url = {https://github.com/WebAssembly/wabt/tree/main},
  urldate = {2025-08-19}
}

@online{wamr_heaps,
  title = {Understand the {{WAMR}} Heaps},
  author = {Wang, Xin and Huang},
  date = {2023-03-17T17:20:07+08:00},
  url = {https://bytecodealliance.github.io/wamr.dev/blog/understand-the-wamr-heaps/},
  urldate = {2025-08-22},
  abstract = {Linear memory \# The linear memory is a contiguous, mutable array of raw bytes. For most compilers, e.g. wasi-sdk, emsdk, rustc or asc, normally it includes three parts, data area, auxiliary stack area and heap area. The initial and maximum sizes of linear memory can be configured through the compilation parameters: For wasi-sdk, the initial/max size can be specified with -Wl,–initial-memory=n1,–max-memory=n2 For emsdk, the initial/max size can be specified with -s INITIAL\_MEMORY=n1 -s MAXIMUM\_MEMORY=n2 -s ALLOW\_MEMORY\_GROWTH=1 or -s TOTAL\_MEMORY=n For asc, they can be specified with –initialMemory and –maximumMemory flags},
  langid = {american},
  organization = {WAMR}
}

@online{wamr_project,
  title = {{{WebAssembly Micro Runtime}}},
  url = {https://bytecodealliance.github.io/wamr.dev/},
  urldate = {2025-08-19},
  abstract = {WebAssembly Micro Runtime (WAMR) is a lightweight standalone WebAssembly (WASM) runtime with small footprint, high performance and highly configurable features for applications cross from embedded, IoT, edge to Trusted Execution Environment (TEE), smart contract, cloud native and so on.},
  langid = {american},
  organization = {WAMR}
}

@software{wamr_project2,
  title = {Bytecodealliance/Wasm-Micro-Runtime},
  date = {2025-08-19T00:53:55Z},
  origdate = {2019-05-02T21:32:09Z},
  url = {https://github.com/bytecodealliance/wasm-micro-runtime},
  urldate = {2025-08-19},
  abstract = {WebAssembly Micro Runtime (WAMR)},
  organization = {Bytecode Alliance},
  keywords = {aot,assembly-script,embedded,interpreter,iot,jit,pthread,runtime,sgx,wasi-nn,wasi-threads,wasm,wasm-socket,webassembly}
}

@online{wamr_running_modes,
  title = {Introduction to {{WAMR}} Running Modes},
  author = {Liang, Tianlong},
  date = {2023-01-19T17:20:07+08:00},
  url = {https://bytecodealliance.github.io/wamr.dev/blog/introduction-to-wamr-running-modes/},
  urldate = {2025-08-22},
  abstract = {The options of running a Wasm module \# Usually, a WebAssembly module can be executed in either interpreter, Just-In-Time (JIT), or Ahead-Of-Time (AOT) compilation mode, and the choice can be based on the preference for execute performance, resource, etc. WAMR supports all three modes and even more: AOT: WAMR AOT helps to achieve nearly native speed, very small footprint, and quick startup. Use the wamrc compiler to compile wasm file to the AOT file, and then run it on iwasm vmcore.},
  langid = {american},
  organization = {WAMR}
}

@online{wamr_stacks,
  title = {Understand the {{WAMR}} Stacks},
  date = {2023-03-18T09:20:07+08:00},
  url = {https://bytecodealliance.github.io/wamr.dev/blog/understand-the-wamr-stacks/},
  urldate = {2025-08-22},
  abstract = {The status of stacks \# During the WAMR executes a Wasm function, there will be a Wasm stack created and used. For interpreter mode, as the Wasm functions intercall, the Wasm stack frames will grow, while the native stack keeps unchanged. When the Wasm calls into a imported native function and the native function then call into some Wasm function, the native stack will add a frame, and an empty frame will be inserted into wasm stack to indicate the function is imported from native.},
  langid = {american},
  organization = {WAMR}
}

@software{wamr-wasi-i2c,
  title = {Idlab-Discover/Wamr-Wasi-I2c},
  date = {2025-08-19T17:02:08Z},
  origdate = {2025-05-10T14:28:10Z},
  url = {https://github.com/idlab-discover/wamr-wasi-i2c},
  urldate = {2025-08-25},
  abstract = {I2C System Interface implementation for WAMR and Wasmtime},
  organization = {IDLab DISCOVER}
}

@online{wasi_component_model,
  title = {Introduction - {{The WebAssembly Component Model}}},
  url = {https://component-model.bytecodealliance.org/},
  urldate = {2025-08-18}
}

@software{wasi_i2c_proposal,
  title = {{{WebAssembly}}/Wasi-I2c},
  date = {2025-05-29T17:20:03Z},
  origdate = {2023-03-31T22:38:38Z},
  url = {https://github.com/WebAssembly/wasi-i2c},
  urldate = {2025-08-19},
  abstract = {I2C API for WASI},
  organization = {WebAssembly},
  keywords = {proposal,wasi}
}

@software{wasi_libc_git,
  title = {{{WebAssembly}}/Wasi-Libc},
  date = {2025-08-15T22:44:57Z},
  origdate = {2019-01-17T15:02:57Z},
  url = {https://github.com/WebAssembly/wasi-libc},
  urldate = {2025-08-25},
  abstract = {WASI libc implementation for WebAssembly},
  organization = {WebAssembly},
  keywords = {wasi}
}

@online{wasi_mozilla_blog,
  title = {Standardizing {{WASI}}: {{A}} System Interface to Run {{WebAssembly}} Outside the Web – {{Mozilla Hacks}} - the {{Web}} Developer Blog},
  shorttitle = {Standardizing {{WASI}}},
  author = {Clark, Lin},
  date = {2019-03-27},
  url = {https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface},
  urldate = {2025-08-22},
  abstract = {WebAssembly is an assembly language for a conceptual machine, not a physical one. This is why it can be run across a variety of different machine architectures. WebAssembly needs a ...},
  langid = {american},
  organization = {Mozilla Hacks – the Web developer blog}
}

@online{wasi_p2,
  title = {{{WASI}} 0.2 {{Launched}}},
  author = {Gohman, Dan},
  date = {2024-01-25T00:00:00+00:00},
  url = {https://bytecodealliance.org/articles/WASI-0.2},
  urldate = {2025-08-17},
  abstract = {The WASI Subgroup voted on January 25, 2024 to launch WASI 0.2, also knownas WASI Preview 2, or WASIp2!  This blog post is a brief look at the present,past, and future of WASI, and a repost of an original article sharedhere.},
  langid = {english},
  organization = {Bytecode Alliance}
}

@online{wasi_phases,
  title = {{{WASI}}/{{Contributing}}.Md at Main · {{WebAssembly}}/{{WASI}}},
  url = {https://github.com/WebAssembly/WASI/blob/main/Contributing.md#the-phase-process},
  urldate = {2025-08-24}
}

@online{wasi_proposals,
  title = {{{WASI}}/{{Proposals}}.Md at Main · {{WebAssembly}}/{{WASI}}},
  url = {https://github.com/WebAssembly/WASI/blob/main/Proposals.md},
  urldate = {2025-08-24}
}

@online{wasi_start_convention,
  title = {{{WASI}}/Legacy/Application-Abi.Md at Main · {{WebAssembly}}/{{WASI}}},
  url = {https://github.com/WebAssembly/WASI/blob/main/legacy/application-abi.md},
  urldate = {2025-08-25},
  abstract = {WebAssembly System Interface. Contribute to WebAssembly/WASI development by creating an account on GitHub.},
  langid = {english},
  organization = {GitHub}
}

@software{wasisdk,
  title = {{{WebAssembly}}/Wasi-Sdk},
  date = {2025-08-17T12:06:08Z},
  origdate = {2019-03-06T19:07:27Z},
  url = {https://github.com/WebAssembly/wasi-sdk},
  urldate = {2025-08-18},
  abstract = {WASI-enabled WebAssembly C/C++ toolchain},
  organization = {WebAssembly},
  keywords = {llvm,sysroot,wasi-libc,wasi-sdk}
}

@online{wasm_features_support,
  title = {Feature {{Status}} - {{WebAssembly}}},
  url = {https://webassembly.org/features/},
  urldate = {2025-08-17},
  abstract = {WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.},
  langid = {english}
}

@online{wasm_specs,
  title = {{{WebAssembly Specifications}}},
  url = {https://webassembly.github.io/spec/},
  urldate = {2025-08-24}
}

@online{wasm_tools_git,
  title = {Bytecodealliance/Wasm-Tools: {{CLI}} and {{Rust}} Libraries for Low-Level Manipulation of {{WebAssembly}} Modules},
  url = {https://github.com/bytecodealliance/wasm-tools/tree/main},
  urldate = {2025-08-19}
}

@online{wasmtime_and_cranelift_2023,
  title = {Wasmtime and {{Cranelift}} in 2023},
  author = {Hickey, Pat and Fallin, Chris and Fitzgerald, Nick},
  date = {2023-11-21T00:00:00+00:00},
  url = {https://bytecodealliance.org/articles/wasmtime-and-cranelift-in-2023},
  urldate = {2025-08-22},
  abstract = {It’s that time of year: time to start winding down for the winter holidayseason, time to reflect on the past year, and time to think about what we canaccomplish together in 2024. The Wasmtime and Cranelift projects are noexception. This ...},
  langid = {english},
  organization = {Bytecode Alliance}
}

@online{wasmtime_bindgen_docs,
  title = {Bindgen in Wasmtime::Component - {{Rust}}},
  url = {https://docs.wasmtime.dev/api/wasmtime/component/macro.bindgen.html},
  urldate = {2025-08-19}
}

@online{wasmtime_p1_crate_docs,
  title = {Wasmtime\_wasi::Preview1 - {{Rust}}},
  url = {https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/preview1/index.html},
  urldate = {2025-08-22}
}

@online{wasmtime_p2_crate_docs,
  title = {Wasmtime\_wasi::P2 - {{Rust}}},
  url = {https://docs.wasmtime.dev/api/wasmtime_wasi/p2/index.html},
  urldate = {2025-08-22}
}

@online{wasmtime_project,
  title = {Introduction - {{Wasmtime}}},
  url = {https://docs.wasmtime.dev/},
  urldate = {2025-08-19}
}

@online{wat,
  title = {Conventions — {{WebAssembly}} 2.0 ({{Draft}} 2025-06-24)},
  url = {https://webassembly.github.io/spec/core/text/conventions.html},
  urldate = {2025-08-24}
}

@software{wit_bindgen_git,
  title = {Bytecodealliance/Wit-Bindgen},
  date = {2025-08-19T17:21:55Z},
  origdate = {2021-02-23T22:25:51Z},
  url = {https://github.com/bytecodealliance/wit-bindgen},
  urldate = {2025-08-19},
  abstract = {A language binding generator for WebAssembly interface types},
  organization = {Bytecode Alliance},
  keywords = {interface-types,module-linking,rust,wasi,wasmtime,webassembly}
}

@online{wit_specification,
  title = {{{WIT Reference}} - {{The WebAssembly Component Model}}},
  url = {https://component-model.bytecodealliance.org/design/wit.html},
  urldate = {2025-08-19}
}

@online{witx_docs,
  title = {{{WASI}}/Legacy/Tools/Witx-Docs.Md at Main · {{WebAssembly}}/{{WASI}}},
  url = {https://github.com/WebAssembly/WASI/blob/main/legacy/tools/witx-docs.md},
  urldate = {2025-08-19},
  abstract = {WebAssembly System Interface. Contribute to WebAssembly/WASI development by creating an account on GitHub.},
  langid = {english},
  organization = {GitHub}
}
